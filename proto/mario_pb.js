// source: proto/mario.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ControllerListMsg', null, global);
goog.exportSymbol('proto.ControllerMsg', null, global);
goog.exportSymbol('proto.MarioListMsg', null, global);
goog.exportSymbol('proto.MarioMsg', null, global);
goog.exportSymbol('proto.ValidPlayersMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MarioListMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MarioListMsg.repeatedFields_, null);
};
goog.inherits(proto.MarioListMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MarioListMsg.displayName = 'proto.MarioListMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControllerListMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ControllerListMsg.repeatedFields_, null);
};
goog.inherits(proto.ControllerListMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ControllerListMsg.displayName = 'proto.ControllerListMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MarioMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MarioMsg.repeatedFields_, null);
};
goog.inherits(proto.MarioMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MarioMsg.displayName = 'proto.MarioMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControllerMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ControllerMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ControllerMsg.displayName = 'proto.ControllerMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ValidPlayersMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ValidPlayersMsg.repeatedFields_, null);
};
goog.inherits(proto.ValidPlayersMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ValidPlayersMsg.displayName = 'proto.ValidPlayersMsg';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MarioListMsg.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MarioListMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.MarioListMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MarioListMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MarioListMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagecount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    marioList: jspb.Message.toObjectList(msg.getMarioList(),
    proto.MarioMsg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MarioListMsg}
 */
proto.MarioListMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MarioListMsg;
  return proto.MarioListMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MarioListMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MarioListMsg}
 */
proto.MarioListMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessagecount(value);
      break;
    case 2:
      var value = new proto.MarioMsg;
      reader.readMessage(value,proto.MarioMsg.deserializeBinaryFromReader);
      msg.addMario(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MarioListMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MarioListMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MarioListMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MarioListMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagecount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMarioList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MarioMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 messageCount = 1;
 * @return {number}
 */
proto.MarioListMsg.prototype.getMessagecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioListMsg} returns this
 */
proto.MarioListMsg.prototype.setMessagecount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MarioMsg mario = 2;
 * @return {!Array<!proto.MarioMsg>}
 */
proto.MarioListMsg.prototype.getMarioList = function() {
  return /** @type{!Array<!proto.MarioMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MarioMsg, 2));
};


/**
 * @param {!Array<!proto.MarioMsg>} value
 * @return {!proto.MarioListMsg} returns this
*/
proto.MarioListMsg.prototype.setMarioList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MarioMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MarioMsg}
 */
proto.MarioListMsg.prototype.addMario = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MarioMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MarioListMsg} returns this
 */
proto.MarioListMsg.prototype.clearMarioList = function() {
  return this.setMarioList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ControllerListMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControllerListMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.ControllerListMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControllerListMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControllerListMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    controllerList: jspb.Message.toObjectList(msg.getControllerList(),
    proto.ControllerMsg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControllerListMsg}
 */
proto.ControllerListMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControllerListMsg;
  return proto.ControllerListMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControllerListMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControllerListMsg}
 */
proto.ControllerListMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ControllerMsg;
      reader.readMessage(value,proto.ControllerMsg.deserializeBinaryFromReader);
      msg.addController(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControllerListMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ControllerListMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ControllerListMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControllerListMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControllerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ControllerMsg.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ControllerMsg controller = 1;
 * @return {!Array<!proto.ControllerMsg>}
 */
proto.ControllerListMsg.prototype.getControllerList = function() {
  return /** @type{!Array<!proto.ControllerMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ControllerMsg, 1));
};


/**
 * @param {!Array<!proto.ControllerMsg>} value
 * @return {!proto.ControllerListMsg} returns this
*/
proto.ControllerListMsg.prototype.setControllerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ControllerMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ControllerMsg}
 */
proto.ControllerListMsg.prototype.addController = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ControllerMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ControllerListMsg} returns this
 */
proto.ControllerListMsg.prototype.clearControllerList = function() {
  return this.setControllerList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MarioMsg.repeatedFields_ = [13,14,15,16,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MarioMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.MarioMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MarioMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MarioMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    controller: (f = msg.getController()) && proto.ControllerMsg.toObject(includeInstance, f),
    playername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0),
    prevaction: jspb.Message.getFieldWithDefault(msg, 4, 0),
    actionstate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    actiontimer: jspb.Message.getFieldWithDefault(msg, 6, 0),
    actionarg: jspb.Message.getFieldWithDefault(msg, 7, 0),
    invinctimer: jspb.Message.getFieldWithDefault(msg, 8, 0),
    framessincea: jspb.Message.getFieldWithDefault(msg, 9, 0),
    framessinceb: jspb.Message.getFieldWithDefault(msg, 10, 0),
    wallkicktimer: jspb.Message.getFieldWithDefault(msg, 11, 0),
    doublejumptimer: jspb.Message.getFieldWithDefault(msg, 12, 0),
    faceangleList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    anglevelList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    posList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 15)) == null ? undefined : f,
    velList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 16)) == null ? undefined : f,
    forwardvel: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    rawdataList: (f = jspb.Message.getRepeatedField(msg, 18)) == null ? undefined : f,
    usedobjid: jspb.Message.getFieldWithDefault(msg, 19, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MarioMsg}
 */
proto.MarioMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MarioMsg;
  return proto.MarioMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MarioMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MarioMsg}
 */
proto.MarioMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ControllerMsg;
      reader.readMessage(value,proto.ControllerMsg.deserializeBinaryFromReader);
      msg.setController(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAction(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrevaction(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionstate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiontimer(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionarg(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setInvinctimer(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFramessincea(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFramessinceb(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWallkicktimer(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDoublejumptimer(value);
      break;
    case 13:
      var value = /** @type {!Array<number>} */ (reader.readPackedSint32());
      msg.setFaceangleList(value);
      break;
    case 14:
      var value = /** @type {!Array<number>} */ (reader.readPackedSint32());
      msg.setAnglevelList(value);
      break;
    case 15:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setPosList(value);
      break;
    case 16:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setVelList(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setForwardvel(value);
      break;
    case 18:
      var value = /** @type {!Array<number>} */ (reader.readPackedSint32());
      msg.setRawdataList(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsedobjid(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MarioMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MarioMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MarioMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MarioMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getController();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ControllerMsg.serializeBinaryToWriter
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPrevaction();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getActionstate();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getActiontimer();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getActionarg();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getInvinctimer();
  if (f !== 0) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = message.getFramessincea();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getFramessinceb();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getWallkicktimer();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getDoublejumptimer();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getFaceangleList();
  if (f.length > 0) {
    writer.writePackedSint32(
      13,
      f
    );
  }
  f = message.getAnglevelList();
  if (f.length > 0) {
    writer.writePackedSint32(
      14,
      f
    );
  }
  f = message.getPosList();
  if (f.length > 0) {
    writer.writePackedFloat(
      15,
      f
    );
  }
  f = message.getVelList();
  if (f.length > 0) {
    writer.writePackedFloat(
      16,
      f
    );
  }
  f = message.getForwardvel();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getRawdataList();
  if (f.length > 0) {
    writer.writePackedSint32(
      18,
      f
    );
  }
  f = message.getUsedobjid();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
};


/**
 * optional ControllerMsg controller = 1;
 * @return {?proto.ControllerMsg}
 */
proto.MarioMsg.prototype.getController = function() {
  return /** @type{?proto.ControllerMsg} */ (
    jspb.Message.getWrapperField(this, proto.ControllerMsg, 1));
};


/**
 * @param {?proto.ControllerMsg|undefined} value
 * @return {!proto.MarioMsg} returns this
*/
proto.MarioMsg.prototype.setController = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.clearController = function() {
  return this.setController(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MarioMsg.prototype.hasController = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string playerName = 2;
 * @return {string}
 */
proto.MarioMsg.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 action = 3;
 * @return {number}
 */
proto.MarioMsg.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setAction = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 prevAction = 4;
 * @return {number}
 */
proto.MarioMsg.prototype.getPrevaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setPrevaction = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 actionState = 5;
 * @return {number}
 */
proto.MarioMsg.prototype.getActionstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setActionstate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 actionTimer = 6;
 * @return {number}
 */
proto.MarioMsg.prototype.getActiontimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setActiontimer = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 actionArg = 7;
 * @return {number}
 */
proto.MarioMsg.prototype.getActionarg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setActionarg = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional sint32 invincTimer = 8;
 * @return {number}
 */
proto.MarioMsg.prototype.getInvinctimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setInvinctimer = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 framesSinceA = 9;
 * @return {number}
 */
proto.MarioMsg.prototype.getFramessincea = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setFramessincea = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 framesSinceB = 10;
 * @return {number}
 */
proto.MarioMsg.prototype.getFramessinceb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setFramessinceb = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 wallKickTimer = 11;
 * @return {number}
 */
proto.MarioMsg.prototype.getWallkicktimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setWallkicktimer = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 doubleJumpTimer = 12;
 * @return {number}
 */
proto.MarioMsg.prototype.getDoublejumptimer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setDoublejumptimer = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated sint32 faceAngle = 13;
 * @return {!Array<number>}
 */
proto.MarioMsg.prototype.getFaceangleList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setFaceangleList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.addFaceangle = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.clearFaceangleList = function() {
  return this.setFaceangleList([]);
};


/**
 * repeated sint32 angleVel = 14;
 * @return {!Array<number>}
 */
proto.MarioMsg.prototype.getAnglevelList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setAnglevelList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.addAnglevel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.clearAnglevelList = function() {
  return this.setAnglevelList([]);
};


/**
 * repeated float pos = 15;
 * @return {!Array<number>}
 */
proto.MarioMsg.prototype.getPosList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 15));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setPosList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.addPos = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.clearPosList = function() {
  return this.setPosList([]);
};


/**
 * repeated float vel = 16;
 * @return {!Array<number>}
 */
proto.MarioMsg.prototype.getVelList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 16));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setVelList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.addVel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.clearVelList = function() {
  return this.setVelList([]);
};


/**
 * optional float forwardVel = 17;
 * @return {number}
 */
proto.MarioMsg.prototype.getForwardvel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setForwardvel = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * repeated sint32 rawData = 18;
 * @return {!Array<number>}
 */
proto.MarioMsg.prototype.getRawdataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 18));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setRawdataList = function(value) {
  return jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.addRawdata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.clearRawdataList = function() {
  return this.setRawdataList([]);
};


/**
 * optional uint32 usedObjID = 19;
 * @return {number}
 */
proto.MarioMsg.prototype.getUsedobjid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setUsedobjid = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint32 channelID = 20;
 * @return {number}
 */
proto.MarioMsg.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.MarioMsg} returns this
 */
proto.MarioMsg.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControllerMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.ControllerMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControllerMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControllerMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    stickx: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    sticky: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    stickmag: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    buttondown: jspb.Message.getFieldWithDefault(msg, 4, 0),
    buttonpressed: jspb.Message.getFieldWithDefault(msg, 5, 0),
    camerayaw: jspb.Message.getFieldWithDefault(msg, 6, 0),
    channelid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControllerMsg}
 */
proto.ControllerMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControllerMsg;
  return proto.ControllerMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControllerMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControllerMsg}
 */
proto.ControllerMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStickx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSticky(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStickmag(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setButtondown(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setButtonpressed(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCamerayaw(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControllerMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ControllerMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ControllerMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControllerMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStickx();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSticky();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStickmag();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getButtondown();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getButtonpressed();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getCamerayaw();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = message.getChannelid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional float stickX = 1;
 * @return {number}
 */
proto.ControllerMsg.prototype.getStickx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ControllerMsg} returns this
 */
proto.ControllerMsg.prototype.setStickx = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float stickY = 2;
 * @return {number}
 */
proto.ControllerMsg.prototype.getSticky = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ControllerMsg} returns this
 */
proto.ControllerMsg.prototype.setSticky = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float stickMag = 3;
 * @return {number}
 */
proto.ControllerMsg.prototype.getStickmag = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ControllerMsg} returns this
 */
proto.ControllerMsg.prototype.setStickmag = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 buttonDown = 4;
 * @return {number}
 */
proto.ControllerMsg.prototype.getButtondown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ControllerMsg} returns this
 */
proto.ControllerMsg.prototype.setButtondown = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 buttonPressed = 5;
 * @return {number}
 */
proto.ControllerMsg.prototype.getButtonpressed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ControllerMsg} returns this
 */
proto.ControllerMsg.prototype.setButtonpressed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 cameraYaw = 6;
 * @return {number}
 */
proto.ControllerMsg.prototype.getCamerayaw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ControllerMsg} returns this
 */
proto.ControllerMsg.prototype.setCamerayaw = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 channelID = 7;
 * @return {number}
 */
proto.ControllerMsg.prototype.getChannelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ControllerMsg} returns this
 */
proto.ControllerMsg.prototype.setChannelid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ValidPlayersMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ValidPlayersMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.ValidPlayersMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ValidPlayersMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValidPlayersMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    validplayersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ValidPlayersMsg}
 */
proto.ValidPlayersMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ValidPlayersMsg;
  return proto.ValidPlayersMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ValidPlayersMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ValidPlayersMsg}
 */
proto.ValidPlayersMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setValidplayersList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ValidPlayersMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ValidPlayersMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ValidPlayersMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ValidPlayersMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidplayersList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 validPlayers = 1;
 * @return {!Array<number>}
 */
proto.ValidPlayersMsg.prototype.getValidplayersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ValidPlayersMsg} returns this
 */
proto.ValidPlayersMsg.prototype.setValidplayersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ValidPlayersMsg} returns this
 */
proto.ValidPlayersMsg.prototype.addValidplayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ValidPlayersMsg} returns this
 */
proto.ValidPlayersMsg.prototype.clearValidplayersList = function() {
  return this.setValidplayersList([]);
};


goog.object.extend(exports, proto);
